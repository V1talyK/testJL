precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Random.MersenneTwister, 1}, Random.MersenneTwister})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{Core.Compiler.var"#258#260"{DataType, Tuple{Parsers.var"#1#2", Bool}}, Int64})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Tuple, Base.UnitRange{Int64}})
precompile(Tuple{typeof(CSV.read), String, Type})
precompile(Tuple{typeof(Mmap.mmap), String, Type{Array{UInt8, 1}}})
precompile(Tuple{Base.var"##open#319", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Mmap.var"#7#8"{Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{Type{Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Base.vcat), Array{Type, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CSV.var"#15#19", Array{Type, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(CSV.nonstandardtype), Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}, typeof(CSV.nonstandardtype)}})
precompile(Tuple{Type{CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}}, String, Array{Symbol, 1}, Int64, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Array{Int64, 1}, Array{Type, 1}, Array{UInt8, 1}, Array{Int64, 1}, Float64, Type})
precompile(Tuple{Parsers.var"##s31#19", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Parsers.var"##s31#22", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Parsers.var"#23#24"}, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:debug, :typemap), Tuple{Bool, Base.Dict{Type, Type}}}, Type{CSV.File{threaded} where threaded}, CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.allocate), Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Array{CSV.RefPool, 1}})
precompile(Tuple{typeof(CSV.allocate), Core.TypeofBottom, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{typeof(CSV.parsefilechunk!), Base.Val{false}, Int64, Base.Dict{Type, Type}, Array{AbstractArray{T, 1} where T, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Array{Int64, 1}, Float64, Array{CSV.RefPool, 1}, Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Bool, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Type{Tuple{}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type})
precompile(Tuple{typeof(CSV.allocate), Type, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Float64, 1, S, V, A} where A<:AbstractArray{Float64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Float64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Float64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, UInt32}}, Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{String, UInt32}})
precompile(Tuple{Type{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}, Array{String, 1}, Base.Threads.Atomic{Int64}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{Int64, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{Int64, 1}}, Type{Symbol}, Type{AbstractArray{var"#s828", 1} where var"#s828"}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Dict{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Array{Float64, 1}, Symbol})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{T, 1} where T, 1}, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, CSV.File{false}})
precompile(Tuple{typeof(Base.:(|>)), Tables.CopiedColumns{CSV.File{false}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
